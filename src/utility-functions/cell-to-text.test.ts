import { cellToText } from './cell-to-text'
import { binaryToBraille as b2b } from './cell-to-braille'

describe('cellToText', () => {
    it('identifies the basic letters', () => {
        expect(cellToText(b2b["1"])).toEqual('a')
        expect(cellToText(b2b["1"], '⠀')).toEqual('a')
        expect(cellToText(b2b["12"])).toEqual('b')
        expect(cellToText(b2b["14"])).toEqual('c')
        expect(cellToText(b2b["145"])).toEqual('d')
        expect(cellToText(b2b["15"])).toEqual('e')
        expect(cellToText(b2b["124"])).toEqual('f')
        expect(cellToText(b2b["1245"])).toEqual('g')
        expect(cellToText(b2b["125"])).toEqual('h')
        expect(cellToText(b2b["24"])).toEqual('i')
        expect(cellToText(b2b["245"])).toEqual('j')
        expect(cellToText(b2b["13"])).toEqual('k')
        expect(cellToText(b2b["123"])).toEqual('l')
        expect(cellToText(b2b["134"])).toEqual('m')
        expect(cellToText(b2b["1345"])).toEqual('n')
        expect(cellToText(b2b["135"])).toEqual('o')
        expect(cellToText(b2b["1234"])).toEqual('p')
        expect(cellToText(b2b["12345"])).toEqual('q')
        expect(cellToText(b2b["1235"])).toEqual('r')
        expect(cellToText(b2b["234"])).toEqual('s')
        expect(cellToText(b2b["2345"])).toEqual('t')
        expect(cellToText(b2b["136"])).toEqual('u')
        expect(cellToText(b2b["1236"])).toEqual('v')
        expect(cellToText(b2b["2456"])).toEqual('w')
        expect(cellToText(b2b["1346"])).toEqual('x')
        expect(cellToText(b2b["13456"])).toEqual('y')
        expect(cellToText(b2b["1356"])).toEqual('z')

        expect(cellToText(b2b["1"], b2b["6"])).toEqual('A')
        expect(cellToText(b2b["12"], b2b["6"])).toEqual('B')
        expect(cellToText(b2b["14"], b2b["6"])).toEqual('C')
        expect(cellToText(b2b["145"], b2b["6"])).toEqual('D')
        expect(cellToText(b2b["15"], b2b["6"])).toEqual('E')
        expect(cellToText(b2b["124"], b2b["6"])).toEqual('F')
        expect(cellToText(b2b["1245"], b2b["6"])).toEqual('G')
        expect(cellToText(b2b["125"], b2b["6"])).toEqual('H')
        expect(cellToText(b2b["24"], b2b["6"])).toEqual('I')
        expect(cellToText(b2b["245"], b2b["6"])).toEqual('J')
        expect(cellToText(b2b["13"], b2b["6"])).toEqual('K')
        expect(cellToText(b2b["123"], b2b["6"])).toEqual('L')
        expect(cellToText(b2b["134"], b2b["6"])).toEqual('M')
        expect(cellToText(b2b["1345"], b2b["6"])).toEqual('N')
        expect(cellToText(b2b["135"], b2b["6"])).toEqual('O')
        expect(cellToText(b2b["1234"], b2b["6"])).toEqual('P')
        expect(cellToText(b2b["12345"], b2b["6"])).toEqual('Q')
        expect(cellToText(b2b["1235"], b2b["6"])).toEqual('R')
        expect(cellToText(b2b["234"], b2b["6"])).toEqual('S')
        expect(cellToText(b2b["2345"], b2b["6"])).toEqual('T')
        expect(cellToText(b2b["136"], b2b["6"])).toEqual('U')
        expect(cellToText(b2b["1236"], b2b["6"])).toEqual('V')
        expect(cellToText(b2b["2456"], b2b["6"])).toEqual('W')
        expect(cellToText(b2b["1346"], b2b["6"])).toEqual('X')
        expect(cellToText(b2b["13456"], b2b["6"])).toEqual('Y')
        expect(cellToText(b2b["1356"], b2b["6"])).toEqual('Z')
    })

    it('identifies number', () => {
        expect(cellToText(b2b["1"], b2b["3456"])).toEqual('1')
        expect(cellToText(b2b["12"], b2b["3456"])).toEqual('2')
        expect(cellToText(b2b["14"], b2b["3456"])).toEqual('3')
        expect(cellToText(b2b["145"], b2b["3456"])).toEqual('4')
        expect(cellToText(b2b["15"], b2b["3456"])).toEqual('5')
        expect(cellToText(b2b["124"], b2b["3456"])).toEqual('6')
        expect(cellToText(b2b["1245"], b2b["3456"])).toEqual('7')
        expect(cellToText(b2b["125"], b2b["3456"])).toEqual('8')
        expect(cellToText(b2b["24"], b2b["3456"])).toEqual('9')
        expect(cellToText(b2b["245"], b2b["3456"])).toEqual('0')
    })

    it('hides indicators', () => {
        expect(cellToText(b2b["3456"], undefined, b2b["1356"])).toEqual('#') // non-number
        expect(cellToText(b2b["3456"], undefined, b2b["1"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["12"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["14"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["145"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["15"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["124"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["1245"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["125"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["24"])).toEqual('')
        expect(cellToText(b2b["3456"], undefined, b2b["245"])).toEqual('')
        expect(cellToText(b2b["3456"], b2b["3456"], b2b["1"])).toEqual('') // sequential #s
    })

    it('does punctuation', () => {
        expect(cellToText(b2b["2"])).toEqual(',')
        expect(cellToText(b2b["256"])).toEqual('.')
        expect(cellToText(b2b["3"])).toEqual('\'') // Apostrophe
        expect(cellToText(b2b["25"])).toEqual(":")
        expect(cellToText(b2b["36"], b2b["6"])).toEqual("–") // Dash
        // TODO: expect(cellToText('⠤', '⠐⠠')).toEqual("—") // Long Dash
        expect(cellToText(b2b["235"])).toEqual('!')
        expect(cellToText(b2b["36"])).toEqual('‐')  // Hyphen
        expect(cellToText(b2b["236"], b2b["1"])).toEqual('?')  // Question Mark (preceded by non-blank)
        expect(cellToText(b2b["23"])).toEqual(";")
        // TODO: expect(cellToText('⠲', '⠲⠲')).toEqual("…") // Ellipsis
        expect(cellToText(b2b["34"], b2b["456"])).toEqual("/")
        expect(cellToText(b2b["16"], b2b["456"])).toEqual("\\")
        expect(cellToText(b2b["236"], b2b[""])).toEqual("“")
        expect(cellToText(b2b["356"])).toEqual("”")
        expect(cellToText(b2b["236"], b2b["6"])).toEqual("‘")
        expect(cellToText(b2b["356"], b2b["6"])).toEqual("’")
        expect(cellToText(b2b[""])).toEqual(' ')  // Braille space
        expect(cellToText(b2b["3456"])).toEqual('#')
    })

    it('does grouping punctuation', () => {
        expect(cellToText(b2b["126"], b2b["5"])).toEqual('(')
        expect(cellToText(b2b["345"], b2b["5"])).toEqual(')')
        expect(cellToText(b2b["126"], b2b["46"])).toEqual('[')
        expect(cellToText(b2b["345"], b2b["46"])).toEqual(']')
        expect(cellToText(b2b["126"], b2b["456"])).toEqual('{')
        expect(cellToText(b2b["345"], b2b["456"])).toEqual('}')
        expect(cellToText(b2b["126"], b2b["4"])).toEqual('〈')
        expect(cellToText(b2b["345"], b2b["4"])).toEqual('〉')

    })

    it('identifies strong contractions', () => {
        expect(cellToText(b2b["12346"])).toEqual('and')
        expect(cellToText(b2b["123456"])).toEqual('for')
        expect(cellToText(b2b["12356"])).toEqual('of')
        expect(cellToText(b2b["2346"])).toEqual('the')
        expect(cellToText(b2b["23456"])).toEqual('with')
    })

    it('identifies alphabetic wordsigns', () => {
        expect(cellToText(b2b["12"], b2b[''], b2b[''])).toEqual('but')
        expect(cellToText(b2b["14"], b2b[''], b2b[''])).toEqual('can')
        expect(cellToText(b2b["145"], b2b[''], b2b[''])).toEqual('do')
        expect(cellToText(b2b["15"], b2b[''], b2b[''])).toEqual('every')
        expect(cellToText(b2b["124"], b2b[''], b2b[''])).toEqual('from')
        expect(cellToText(b2b["1245"], b2b[''], b2b[''])).toEqual('go')
        expect(cellToText(b2b["125"], b2b[''], b2b[''])).toEqual('have')
        expect(cellToText(b2b["245"], b2b[''], b2b[''])).toEqual('just')
        expect(cellToText(b2b["13"], b2b[''], b2b[''])).toEqual('knowledge')
        expect(cellToText(b2b["123"], b2b[''], b2b[''])).toEqual('like')
        expect(cellToText(b2b["134"], b2b[''], b2b[''])).toEqual('more')
        expect(cellToText(b2b["1345"], b2b[''], b2b[''])).toEqual('not')
        expect(cellToText(b2b["1234"], b2b[''], b2b[''])).toEqual('people')
        expect(cellToText(b2b["12345"], b2b[''], b2b[''])).toEqual('quite')
        expect(cellToText(b2b["1235"], b2b[''], b2b[''])).toEqual('rather')
        expect(cellToText(b2b["234"], b2b[''], b2b[''])).toEqual('so')
        expect(cellToText(b2b["2345"], b2b[''], b2b[''])).toEqual('that')
        expect(cellToText(b2b["136"], b2b[''], b2b[''])).toEqual('us')
        expect(cellToText(b2b["1236"], b2b[''], b2b[''])).toEqual('very')
        expect(cellToText(b2b["2456"], b2b[''], b2b[''])).toEqual('will')
        expect(cellToText(b2b["1346"], b2b[''], b2b[''])).toEqual('it')
        expect(cellToText(b2b["13456"], b2b[''], b2b[''])).toEqual('you')
        expect(cellToText(b2b["1356"], b2b[''], b2b[''])).toEqual('as')
    })

})